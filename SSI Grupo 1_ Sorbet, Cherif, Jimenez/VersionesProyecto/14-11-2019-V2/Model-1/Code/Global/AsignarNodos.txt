Arg1 : INTEGER;
Arg2 : INTEGER;

{arrayAsignados : ANYOBJ;}

nodosNecesarios : INTEGER;
nodosAsignados : INTEGER; 
nodosPosibles : INTEGER;

distDerecha : INTEGER;
distIzquierda : INTEGER; 

id : INTEGER;

nNecesarios := Arg1;
id := Arg2;
nodosPosibles := Model.nodosLibres;
arrayAsignados := CreateArray("INTEGER", 1,  nNecesarios);


{Realizamos la busqueda del primer nodo libre}
i : INTEGER;
i := 0;

{Buscamos el primer nodo libre}
WHILE Model.arrayIDPrograma[i] <> -1
	i := i + 1;
END WHILE;

{Si estan todos ocupados}
IF i = 64
	RETURN -1;
END IF

Model.arrayIDPrograma[i] := id;
Model.nodoDerecha := i;
Model.nodoIzquierda := i;
nodosAsignados := 1;

OUTPUT("NUMERO DE NODOS QUE TIENE QUE OCUPAR")
OUTPUT(nNecesarios);

{Empezamos el algoritmo}

OUTPUT("IMPRIMO LA I",i);

distDerecha := Function("DistanciaDerecha", Model.nodoDerecha);
distIzquierda := Function("DistanciaIzquierda", Model.nodoIzquierda);


{No existe ningun nodo libre}
{IF (distDerecha = -2) OR (distIzquierda = -2)}

WHILE (nodosAsignados < nNecesarios)

	{No ha encontrado otro nodo libre}
	IF ( (distDerecha = distIzquierda) AND (distDerecha = -1) )
		OUTPUT("NO HAY NODOS LIBRES");
		OUTPUT(nodosPosibles);
		nodosPosibles := nodosPosibles - nodosAsignados;
		
		IF nodosPosibles < nNecesarios
			RETURN -1;
		ELSE
			{Borramos todos los nodos que hemos guardado}
			FOR i := 0 TO 63
				IF (Model.arrayIDPrograma[i] = id)
					Model.arrayIDPrograma[i] := -1;
				END IF;
			END FOR;

			{Buscamos el siguiente nodo libre hacia la derecha}
			i := Model.nodoDerecha;
			WHILE Model.arrayIDPrograma[i]<> -1
				i := i +1;
			END WHILE;
			Model.nodoDerecha := i;
			Model.nodoIzquierda := i;
			nodosAsignados := 1;
			distDerecha := Function("DistanciaDerecha", Model.nodoDerecha);
			distIzquierda := -1;
		END IF;
	ELSE
		IF (distDerecha <= distIzquierda)
			Model.nodoDerecha := Function("BuscarNodoDerecha", Model.nodoDerecha);
			Model.arrayIDPrograma[Model.nodoDerecha]:=id;
			distDerecha := Function("DistanciaDerecha", Model.nodoDerecha);
			OUTPUT("DERECHA");
			OUTPUT(Model.nodoDerecha);
			
		ELSE	
			Model.nodoIzquierda := Function("BuscarNodoIzquierda", Model.nodoIzquierda);
			Model.arrayIDPrograma[Model.nodoIzquierda] := id;
			distIzquierda := Function("DistanciaIzquierda", Model.nodoIzquierda);
			OUTPUT("izquiwrda");
			OUTPUT(Model.nodoIzquierda);
		END IF;

		nodosAsignados := nodosAsignados + 1;
	END IF;
END WHILE ;


{Ocupamos los canales}
j:INTEGER;
i:=Model.nodoIzquierda;
WHILE (i<>Model.nodoDerecha)
	j:=0;
	WHILE ((j < Model.nCanales) AND GetArrayValue(Model.arrayCanales, j, i) <> -1)
		j:= j +1;
	END WHILE;
	SetArrayValue(Model.arrayCanales, j,i, id);
	i:=i+1;
	IF(i=64)
		i:=0;
	END IF;
END WHILE;
{OUTPUT("EMPIEZA AQUÍ");
FOR i:=0 TO 63
	OUTPUT(i);
	OUTPUT(Model.arrayIDPrograma[i]);
END FOR;
	}
RETURN 1;
